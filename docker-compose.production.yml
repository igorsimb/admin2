version: '3.8'

services:
  # Django Application
  django:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME:-admin2}-django
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application \
               --bind 0.0.0.0:8000 \
               --workers 3 \
               --worker-class gevent \
               --worker-connections 1000 \
               --timeout 120 \
               --keep-alive 5 \
               --access-logfile - \
               --error-logfile - \
               --log-level info"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - django_logs:/app/logs
    env_file:
      - .env.production
    environment:
      - DJANGO_SETTINGS_MODULE=config.django_config.production
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; response = urllib.request.urlopen('http://localhost:8000/health/'); assert response.getcode() == 200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery Worker
  celery:
    build: .
    command: >
      sh -c "celery -A config worker \
             --loglevel=info \
             --concurrency=4 \
             --pool=eventlet \
             --hostname=worker1@%h \
             --without-mingle \
             --without-gossip"
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env.production
    environment:
      - DJANGO_SETTINGS_MODULE=config.django_config.production
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Beat
  celery-beat:
    build: .
    command: >
      sh -c "celery -A config beat \
             --loglevel=info \
             --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
    env_file:
      - .env.production
    environment:
      - DJANGO_SETTINGS_MODULE=config.django_config.production
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_BEAT_SCHEDULER=django_celery_beat.schedulers:DatabaseScheduler
      - CELERY_WORKER_CONCURRENCY=2
      - CELERY_WORKER_POOL=solo
      - CELERY_TASK_TIME_LIMIT=1800
      - CELERY_TASK_SOFT_TIME_LIMIT=1500
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-admin2}-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./config/third_party_config/postgres.initdb.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-admin2}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin2password}
      - POSTGRES_DB=${POSTGRES_DB:-admin2}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_INITDB_ARGS=--data-checksums
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin2} -d ${POSTGRES_DB:-admin2}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-admin2}-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'

  # Nginx
  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./config/third_party_config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/third_party_config/admin2.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
    ports:
      - "8061:80"
    depends_on:
      django:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  static_volume:
  media_volume:
  redis_data_prod:
  postgres_data:
  django_logs:

networks:
  default:
    driver: bridge
    name: admin2_network
    driver_opts:
      encrypted: ''
